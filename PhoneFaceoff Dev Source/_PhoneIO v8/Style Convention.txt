Note: This is an old style convention I created some time ago. I have not followed this convention fully, so be weary.


Philip's style conventions for HTML, CSS, and JS

CSS property order & grouping: 
	- Follow the property order format below
	- Always list width before height (x, y)
	- The order of top, left, bottom, etc. is determined by going clockwise starting from the top
		- As a result, the order should be as follows: top, right, bottom, left. 
	- The box model properties should be ordered in terms of their proximity to the center:
		- width & height => padding => border => margin
	- Always add a 0 before a decimal, just for readability and consistency
	- Add spaces between values, once again for readability and consistency: background-color: rgb(250, 250, 250);
	- When listing off CSS behaviours regarding a class, make sure to always group it together in a section
	- Also group in terms of the class/id being CHANGED rather than the method of selection
		- Eg: div.menu-theme-toggle:hover + div.menu-theme
		- This statement should be grouped with the div.menu-theme because that's the class that's being changed
	- Group like this:
		- Element
		- Element's hover
		- Element::before
		- Element's ::before hover
		- Element::after
		- Element's ::after hover
	- Sections should have no spaces between theme unless it really improves readability
	- If there is a lot of selectors, list each thing on its own line. Example:
		.borderColor,
		.borderTopColor,
		.borderRightColor,
		.borderBottomColor,
		.borderLeftColor	{
			transition: border-color 0.5s ease;
		}

element {
	/* Positioning */
  	position: absolute;
  	z-index: 10;
  	top: 0;
 	right: 0;

 	/* Display & Box Model */
 	display: inline-block;
 	overflow: hidden;
 	box-sizing: border-box;
 	width: 100px;
 	height: 100px;
	padding: 10px;
	border: 10px solid #333;
	margin: 10px;
	transform: rotate(20deg);

	/* Color */
	background: #000;
	color: #fff;
  
	/* Text */
	font-family: sans-serif;
	font-size: 16px;
	line-height: 1.4;
	text-align: right;

	/* Other */
	cursor: pointer;
	content: "";
}

HTML, CSS & jQuery naming convention (classes, ids, vars, functions):
	- Lowercase characters first for variables and classes
	- Use camelcase to distinguished two words that are related: borderRight
	- Use dashes to separate words that are unrelated for CSS: primary-border-mouseenter
	- Use underscores to separate words that are unrelated for JS: Verify_fName
	- Avoid using all caps acronyms or abbreviations: thisIsAlsoBD
	- Prefixes like NAV, JOIN, etc, should be avoided unless it's completely necessary (ensures class and id names aren't re-used)
	- Functions should start with a capital letter: Verify_fName
	- Global variables should all be in all caps

jQuery .css() arguments:
	- When typing in the property, please use JavaScript syntax instead of CSS syntax: thisIsGood, this-is-bad
	
Website file & directory naming convention:
	- Applies to files that are used by the site (eg. PHP, HTML, CSS, JS files) 
	- Any words will be separated by underscores: this_is_a_good_name.php
	- Anything modular should be in its designated modular directory: template_footer.php href => templates/template_footer.php
	- Any modular files should have a prefix: template_footer, script_main, etc.
	- Modular files cannot have the same name extension UNLESS they are related. For example, style_footer.css codes for the styling of template_footer.php
	- Avoid plural when naming any directories or files
	- No caps
	
File naming convention Pt2:
	- Applies to any documentation files (eg. txt files)
	- Use spaces
	- No caps
	
Commenting convention: 
	- There should always be a header for modular files. Below is the format:
		<!-- Date created: 2016-05-10 -->
		<!-- Date updated: 2016-05-10 -->
		<!-- Creator: Philip Scott -->
		<!-- File name: template_footer.php -->
		<!-- Purpose: Footer template which is present in all Bloplet pages -->
		<!-- Notes: -->
	- Dedicating an entire line for commenting is strongly encouraged in PHP and JavaScript. Short comments in CSS and HTML don't need to stand-alone.
	- "Section comments" should be used where there are distinct sections in a modular file that accomplish different tasks (duh).
	- There should be an empty line above and below the section comment
	- Section comment format below:
	
	/****************************************************************************************************
	 *		Color Change Section: Code that changes page layout when user clicks on theme buttons		*
	 ****************************************************************************************************/
		 
	- For CSS, the comment should be tabbed once
	- Section comment format for CSS below:
	
		/****************************************************************************************************
		 *		Color Change Section: Code that changes page layout when user clicks on theme buttons		*
		 ****************************************************************************************************/

	- CSS multi-line comments (for long explanations) should look like this:
		/*	Why this isn't in style_color: Let's say the user doesn't want to rely on JavaScript. The site should be able to run in the default
		 *		theme without calling AssignTheme(). If JavaScript isn't going to be used, we might as well avoid any css files that were made
		 *		solely to serve some functionality reliant on JS, namely style_color.css. These transitions are needed regardless of whether
		 *		the user uses the theme selector; the elements will need to transition smoothly during their CSS3 animations. */
	
CSS3 & jQuery animations: 
	- Try to use CSS3 as much as possible. jQuery should be used when necessary (eg. for any theme changes)
	- All colour animations MUST have a fall-back in CSS. The site should be fully functional without a AssignTheme() call